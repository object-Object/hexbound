name: Release

on:
  workflow_dispatch:
    inputs:
      modrinth:
        type: boolean
        description: Publish on Modrinth
        default: false
      curseforge:
        type: boolean
        description: Publish on CurseForge
        default: false
      github:
        type: boolean
        description: Publish on GitHub Releases
        default: false
#   maven:
#     type: boolean
#     description: Publish on Maven Central
#     default: false
      pypi:
        type: boolean
        description: Publish on PyPI
        default: false

env:
  PYPI_PACKAGE: hexdoc-hexbound

jobs:
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    if: inputs.modrinth || inputs.curseforge || inputs.github
    outputs:
      mod: ${{ steps.metadata.outputs.value }}
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - uses: actions/checkout@v4
      - run: chmod +x ./gradlew
      - name: Build JARs for publishing
        uses: gradle/gradle-build-action@v2
        with:
          arguments: prepareArtifacts --stacktrace
        env:
          ORG_GRADLE_PROJECT_artifactDir: build/github/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: ./build/github/
      - name: Retrieve mod metadata
        id: metadata
        run: |
          metadata=`cat ./mod.json | tr '\n' ' '`
          echo "::set-output name=value::$metadata"

  build-docs:
    name: Build Docs
    uses: hexdoc-dev/actions/.github/workflows/hexdoc.yml@v1
    permissions:
      contents: write
      pages: read
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    with:
      python-version: 3.11
      pip-extras: " --find-links ./doc/libs"  # FIXME: remove when Hexal is published to PyPI
      deploy-pages: ${{ inputs.pypi }}
      release: true

#   maven-publish:
#     name: Publish to Maven Central
#     runs-on: ubuntu-latest
#     if: inputs.maven
#     needs: [build-artifacts, build-docs]
#     steps:
#       - uses: actions/setup-java@v3
#         with:
#           distribution: "temurin"
#           java-version: "17"
#       - uses: actions/checkout@v3
#       - run: chmod +x ./gradlew
#       - uses: gradle/gradle-build-action@v2
#       - uses: actions/download-artifact@v4
#         with:
#           name: release-artifacts
#           path: ./build/libs/
#       - name: Publish to Maven Central
#         uses: gradle/gradle-build-action@v2
#         with:
#           arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository -PpublishOnly=true
#         env:
#           ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.OSS_USERNAME }}
#           ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.OSS_PASSWORD }}
#           ORG_GRADLE_PROJECT_pgpKey: ${{ secrets.PGP_KEY }}
#           ORG_GRADLE_PROJECT_pgpPassword: ${{ secrets.PGP_PASSWORD }}

  curseforge-publish:
    name: Publish to CurseForge
    runs-on: ubuntu-latest
    if: inputs.curseforge
    needs: [build-artifacts, build-docs]
    env:
      CURSEFORGE_ID: ${{ fromJSON(needs.build-artifacts.outputs.mod).platforms.curseforge.id }}
    environment:
      name: curseforge
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      - uses: Kir-Antipov/mc-publish@v3
        with:
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          curseforge-id: ${{ env.CURSEFORGE_ID }}
          files: |
            ./!(*-@(dev|sources)).jar
            ./*-@(dev|sources).jar
          name: ""

  modrinth-publish:
    name: Publish to Modrinth
    runs-on: ubuntu-latest
    if: inputs.modrinth
    needs: [build-artifacts, build-docs]
    env:
      MODRINTH_ID: ${{ fromJSON(needs.build-artifacts.outputs.mod).platforms.modrinth.id }}
    environment:
      name: modrinth
      url: https://modrinth.com/mod/${{ env.MODRINTH_ID }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      - uses: Kir-Antipov/mc-publish@v3
        with:
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-id: ${{ env.MODRINTH_ID }}
          files: |
            ./!(*-@(dev|sources)).jar
            ./*-@(dev|sources).jar
          name: ""

  github-publish:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    if: inputs.github
    needs: [build-artifacts, build-docs]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ format('v{0}', fromJSON(needs.build-artifacts.outputs.mod).core.version) }}
          commit: ${{ github.ref }}
          name: Release ${{ fromJSON(needs.build-artifacts.outputs.mod).core.version }}
          prerelease: ${{ contains(fromJSON(needs.build-artifacts.outputs.mod).core.version, 'alpha') || contains(fromJSON(needs.build-artifacts.outputs.mod).core.version, 'beta') }}
          artifacts: ./*.jar

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: inputs.pypi
    needs: build-docs
    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PYPI_PACKAGE }}
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: hexdoc-build
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
